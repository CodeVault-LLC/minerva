// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Humblebrag LLC Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/scans": {
            "get": {
                "description": "Get all scans",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get all scans",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ScanAPIResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new scan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Create a new scan",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ScanAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/scans/statistics": {
            "get": {
                "description": "Get scan statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get scan statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/scan.UserStatisticsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/scans/{scanID}": {
            "get": {
                "description": "Get a scan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get a scan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "scanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ScanAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/scans/{scanID}/contents": {
            "get": {
                "description": "Get scan contents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get scan contents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "scanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/scans/{scanID}/findings": {
            "get": {
                "description": "Get scan findings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get scan findings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "scanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FindingResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/scans/{scanID}/network": {
            "get": {
                "description": "Get scan network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scans"
                ],
                "summary": "Get scan network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "scanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NetworkResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CertificateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "issuer": {
                    "type": "string"
                },
                "not_after": {
                    "type": "string"
                },
                "not_before": {
                    "type": "string"
                },
                "public_key_algorithm": {
                    "type": "string"
                },
                "signature_algorithm": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "models.ContentResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "scan_id": {
                    "type": "integer"
                }
            }
        },
        "models.FindingResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "line": {
                    "type": "integer"
                },
                "match": {
                    "type": "string"
                },
                "regex_description": {
                    "type": "string"
                },
                "regex_name": {
                    "type": "string"
                },
                "scan_id": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ListResponse": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "list_id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.NetworkResponse": {
            "type": "object",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CertificateResponse"
                    }
                },
                "dns_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excluded_dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "http_headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "ip_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip_ranges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permitted_dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "whois": {
                    "$ref": "#/definitions/models.WhoisResponse"
                }
            }
        },
        "models.ScanAPIResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "findings": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ListResponse"
                    }
                },
                "md5": {
                    "type": "string"
                },
                "redirect_chain": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sha1": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "website_name": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                }
            }
        },
        "models.WhoisResponse": {
            "type": "object",
            "properties": {
                "admin_city": {
                    "type": "string"
                },
                "admin_country": {
                    "type": "string"
                },
                "admin_email": {
                    "type": "string"
                },
                "admin_name": {
                    "type": "string"
                },
                "admin_org": {
                    "type": "string"
                },
                "admin_phone": {
                    "type": "string"
                },
                "admin_postal_code": {
                    "type": "string"
                },
                "admin_state": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name_servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone": {
                    "type": "string"
                },
                "registrant_city": {
                    "type": "string"
                },
                "registrant_country": {
                    "type": "string"
                },
                "registrant_email": {
                    "type": "string"
                },
                "registrant_name": {
                    "type": "string"
                },
                "registrant_org": {
                    "type": "string"
                },
                "registrant_phone": {
                    "type": "string"
                },
                "registrant_postal_code": {
                    "type": "string"
                },
                "registrant_state": {
                    "type": "string"
                },
                "registrar": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "scan.UserStatisticsResponse": {
            "type": "object",
            "properties": {
                "lastScansIn24Hours": {
                    "type": "integer"
                },
                "mostScannedWebsites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScanAPIResponse"
                    }
                },
                "totalDomainsScanned": {
                    "type": "integer"
                },
                "totalScans": {
                    "type": "integer"
                }
            }
        },
        "types.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error Code",
                    "type": "integer"
                },
                "message": {
                    "description": "Error Message",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Humblebrag-API",
	Description:      "Humblebrag is a scanner service which detects and reports on the presence of sensitive data in your codebase and infrastructure.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
