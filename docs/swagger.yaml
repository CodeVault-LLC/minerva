basePath: /api/v1
definitions:
  models.CertificateResponse:
    properties:
      id:
        type: integer
      issuer:
        type: string
      not_after:
        type: string
      not_before:
        type: string
      public_key_algorithm:
        type: string
      signature_algorithm:
        type: string
      subject:
        type: string
    type: object
  models.ContentResponse:
    properties:
      content:
        type: string
      id:
        type: integer
      name:
        type: string
      scan_id:
        type: integer
    type: object
  models.FindingResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      line:
        type: integer
      match:
        type: string
      regex_description:
        type: string
      regex_name:
        type: string
      scan_id:
        type: integer
      source:
        type: string
      updated_at:
        type: string
    type: object
  models.ListResponse:
    properties:
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        type: integer
      list_id:
        type: string
      url:
        type: string
    type: object
  models.NetworkResponse:
    properties:
      certificates:
        items:
          $ref: '#/definitions/models.CertificateResponse'
        type: array
      dns_names:
        items:
          type: string
        type: array
      excluded_dns:
        items:
          type: string
        type: array
      http_headers:
        items:
          type: string
        type: array
      id:
        type: integer
      ip_addresses:
        items:
          type: string
        type: array
      ip_ranges:
        items:
          type: string
        type: array
      permitted_dns:
        items:
          type: string
        type: array
      whois:
        $ref: '#/definitions/models.WhoisResponse'
    type: object
  models.ScanAPIResponse:
    properties:
      created_at:
        type: string
      findings:
        type: integer
      id:
        type: integer
      lists:
        items:
          $ref: '#/definitions/models.ListResponse'
        type: array
      md5:
        type: string
      redirect_chain:
        items:
          type: string
        type: array
      sha1:
        type: string
      sha256:
        type: string
      status:
        type: string
      status_code:
        type: integer
      updated_at:
        type: string
      website_name:
        type: string
      website_url:
        type: string
    type: object
  models.ScanRequest:
    properties:
      url:
        type: string
    type: object
  models.WhoisResponse:
    properties:
      admin_city:
        type: string
      admin_country:
        type: string
      admin_email:
        type: string
      admin_name:
        type: string
      admin_org:
        type: string
      admin_phone:
        type: string
      admin_postal_code:
        type: string
      admin_state:
        type: string
      created:
        type: string
      created_at:
        type: string
      domain_name:
        type: string
      email:
        type: string
      expires:
        type: string
      id:
        type: integer
      name_servers:
        items:
          type: string
        type: array
      phone:
        type: string
      registrant_city:
        type: string
      registrant_country:
        type: string
      registrant_email:
        type: string
      registrant_name:
        type: string
      registrant_org:
        type: string
      registrant_phone:
        type: string
      registrant_postal_code:
        type: string
      registrant_state:
        type: string
      registrar:
        type: string
      status:
        type: string
      updated:
        type: string
      updated_at:
        type: string
    type: object
  scan.UserStatisticsResponse:
    properties:
      lastScansIn24Hours:
        type: integer
      mostScannedWebsites:
        items:
          $ref: '#/definitions/models.ScanAPIResponse'
        type: array
      totalDomainsScanned:
        type: integer
      totalScans:
        type: integer
    type: object
  types.Error:
    properties:
      code:
        description: Error Code
        type: integer
      message:
        description: Error Message
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: Humblebrag LLC Support
    url: http://www.swagger.io/support
  description: Humblebrag is a scanner service which detects and reports on the presence
    of sensitive data in your codebase and infrastructure.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Humblebrag-API
  version: "1.0"
paths:
  /scans:
    get:
      consumes:
      - application/json
      description: Get all scans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScanAPIResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get all scans
      tags:
      - scans
    post:
      consumes:
      - application/json
      description: Create a new scan
      parameters:
      - description: Scan Request
        in: body
        name: scan
        required: true
        schema:
          $ref: '#/definitions/models.ScanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ScanAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Create a new scan
      tags:
      - scans
  /scans/{scanID}:
    get:
      consumes:
      - application/json
      description: Get a scan
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ScanAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get a scan
      tags:
      - scans
  /scans/{scanID}/contents:
    get:
      consumes:
      - application/json
      description: Get scan contents
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get scan contents
      tags:
      - scans
  /scans/{scanID}/findings:
    get:
      consumes:
      - application/json
      description: Get scan findings
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FindingResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get scan findings
      tags:
      - scans
  /scans/{scanID}/network:
    get:
      consumes:
      - application/json
      description: Get scan network
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NetworkResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get scan network
      tags:
      - scans
  /scans/statistics:
    get:
      consumes:
      - application/json
      description: Get scan statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/scan.UserStatisticsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get scan statistics
      tags:
      - scans
swagger: "2.0"
