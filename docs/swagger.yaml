basePath: /api/v1
definitions:
  models.CertificateResponse:
    properties:
      id:
        type: integer
      issuer:
        type: string
      not_after:
        type: string
      not_before:
        type: string
      public_key_algorithm:
        type: string
      signature_algorithm:
        type: string
      subject:
        type: string
    type: object
  models.ContentResponse:
    properties:
      access_count:
        type: integer
      file_size:
        type: integer
      file_type:
        type: string
      id:
        type: integer
      last_accessed:
        type: string
      object_key:
        type: string
      storage_type:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  models.DNSResponse:
    properties:
      a_records:
        items:
          type: string
        type: array
      aaaa_records:
        items:
          type: string
        type: array
      cname:
        items:
          type: string
        type: array
      dnssec:
        type: boolean
      id:
        type: integer
      mx_records:
        items:
          type: string
        type: array
      ns_records:
        items:
          type: string
        type: array
      ptr_record:
        type: string
      txt_records:
        items:
          type: string
        type: array
    type: object
  models.FindingResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      line:
        type: integer
      match:
        type: string
      regex_description:
        type: string
      regex_name:
        type: string
      scan_id:
        type: integer
      source:
        type: string
      updated_at:
        type: string
    type: object
  models.MetadataResponse:
    properties:
      cms:
        type: string
      frameworks:
        items:
          type: string
        type: array
      id:
        type: integer
      license:
        type: string
      readme:
        type: string
      robots:
        type: string
      server_language:
        type: string
      server_software:
        type: string
    type: object
  models.NetworkResponse:
    properties:
      certificates:
        items:
          $ref: '#/definitions/models.CertificateResponse'
        type: array
      dns:
        $ref: '#/definitions/models.DNSResponse'
      http_headers:
        items:
          type: string
        type: array
      id:
        type: integer
      ip_addresses:
        items:
          type: string
        type: array
      ip_ranges:
        items:
          type: string
        type: array
      whois:
        $ref: '#/definitions/models.WhoisResponse'
    type: object
  models.ScanAPIResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      md5:
        type: string
      redirect_chain:
        items:
          type: string
        type: array
      sha1:
        type: string
      sha256:
        type: string
      status:
        type: string
      status_code:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.ScanRequest:
    properties:
      url:
        type: string
      userAgent:
        type: string
    type: object
  models.WhoisResponse:
    properties:
      admin_city:
        type: string
      admin_country:
        type: string
      admin_email:
        type: string
      admin_name:
        type: string
      admin_org:
        type: string
      admin_phone:
        type: string
      admin_postal_code:
        type: string
      admin_state:
        type: string
      created:
        type: string
      created_at:
        type: string
      domain_name:
        type: string
      email:
        type: string
      expires:
        type: string
      id:
        type: integer
      name_servers:
        items:
          type: string
        type: array
      phone:
        type: string
      registrant_city:
        type: string
      registrant_country:
        type: string
      registrant_email:
        type: string
      registrant_name:
        type: string
      registrant_org:
        type: string
      registrant_phone:
        type: string
      registrant_postal_code:
        type: string
      registrant_state:
        type: string
      registrar:
        type: string
      status:
        type: string
      updated:
        type: string
      updated_at:
        type: string
    type: object
  responder.APIError:
    properties:
      code:
        description: Error code string (e.g., "auth_invalid_token").
        type: string
      description:
        description: User-friendly description of the error.
        type: string
      hint:
        description: Optional hint for the user on how to resolve the issue.
        type: string
    type: object
  responder.APIResponse:
    properties:
      data:
        description: Populated in case of success responses.
      error:
        allOf:
        - $ref: '#/definitions/responder.APIError'
        description: Populated in case of error responses.
      message:
        type: string
      status_code:
        type: integer
      type:
        $ref: '#/definitions/responder.ResponseType'
    type: object
  responder.ResponseType:
    enum:
    - success
    - error
    type: string
    x-enum-varnames:
    - ResponseTypeSuccess
    - ResponseTypeError
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: Humblebrag LLC Support
    url: http://www.swagger.io/support
  description: Humblebrag is a scanner service which detects and reports on the presence
    of sensitive data in your codebase and infrastructure.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Humblebrag-API
  version: "1.0"
paths:
  /scans:
    get:
      consumes:
      - application/json
      description: Get all scans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ScanAPIResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get all scans
      tags:
      - scans
    post:
      consumes:
      - application/json
      description: Create a new scan
      parameters:
      - description: Scan Request
        in: body
        name: scan
        required: true
        schema:
          $ref: '#/definitions/models.ScanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ScanAPIResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Create a new scan
      tags:
      - scans
  /scans/{scanID}:
    get:
      consumes:
      - application/json
      description: Get a scan
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ScanAPIResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get a scan
      tags:
      - scans
  /scans/{scanID}/contents:
    get:
      consumes:
      - application/json
      description: Get scan contents
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get scan contents
      tags:
      - scans
  /scans/{scanID}/findings:
    get:
      consumes:
      - application/json
      description: Get scan findings
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FindingResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get scan findings
      tags:
      - scans
  /scans/{scanID}/metadata:
    get:
      consumes:
      - application/json
      description: Get scan metadata
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MetadataResponse'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get scan metadata
      tags:
      - scans
  /scans/{scanID}/network:
    get:
      consumes:
      - application/json
      description: Get scan network
      parameters:
      - description: Scan ID
        in: path
        name: scanID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NetworkResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responder.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/responder.APIError'
              type: object
      summary: Get scan network
      tags:
      - scans
swagger: "2.0"
